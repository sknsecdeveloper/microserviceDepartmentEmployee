memory leak / out of memory
how to resolve out of memory issue in java based application

1. VisualVM tool to analyse and find object leaking 
2. Increase heap size using xmx and xms
3. close resouse properly


3rd last value

limit
------

select * from employee limit order by employeeId desc limit(2,1) 

2 is to skip no of row
1 no of row to select

rank
-----
select * from (
select *, rank() over(order by salary desc) as ranking from employee
) as rank_salary where ranking = 3;


2nd last
----

select max(salary) from employee where salany< (select salary from employee)



Setter vs Constructor injection
--------------
Partial not possible in constructor
if all property(dependent) availabe use Constructor, if partial property availabe use setter injection
setter override constructor


failfast Vs failSafe Iterator
-----------------
Fail fast --  ArrayList, Set, Map
Fail Safe - CopyOnWriteArrayList, CopyOnWriteArraySet



Throwable Ex
|____ Exception - IoException, SqlException, ClassNotFoundException, RuntimeException( NullPointerException, Arthmetic exception, IndexOutOfBoundException)
|
|____ Error (stackoverflow, memory error)


Access Modifier
---------------

public - same class, same pkg sub-class, same pkg non sub closs, diff pkg sub class, diff pk non sub class
private - same class
protected - same class, same pkg sub class, same pk non sub class, diff pk sub class
default - same pkg( same class, same pkg sb class, same pkg non sub class)

Profiling
-------------
application-dev.properties
application-qa.properties


@Configuration
{

@Value("$app.url")
public String dbUrl;

@Bean
@Profile("dev")
DataSource getDataSource(){

}



}

Using -Dspring.profiles.active=prod in VM Arguments
Use spring.profiles.active=prod in application.properties

API GateWay
-------------
it's server which resides in front of backend services. 

Feature
.......

Routing

spring cloud gateway 
		routes : 
			id : route1Config
			uri : localhost:808/api/v1/employee
			predicate : /employee/
			
			
Security need to enabled for microservices
Load Balancer need to enable
Monitor - 


Immutable class
---------------

1. Keep class as final so child class can not be created.
2. keep member as private so no direct access
3. keep member as final



Actuator
----------

default root/actuator/info

management.endpoint.web.expose.include =*

In spring boot3 need to authorize "/actuator" -> permitAll





Sequential vs Parallel stream
----------------------------

1. Both are used for transaforming data to desired result from array and Collections
2. Sequential uses single core with i thread to execute pipeline but Parallel stream uses and utilize multicore cpu with multiple thread. 
3. outcome for parallel could be unordered
4. Intermediate operation


Intermediate vs Terminal
----------------------

Intermediate --> returns stream and can pipeline another task. Any number of intermediate operation
Terminal --> stream to desired result but not stream . Only 1 terminal operation. (Count, max, min,   )



 filter, map, limit, reduce, find, and match to customize


Spring Security + Jwt
------------------------
1. Configure spring security (authentication + authorization)
2. Authentication - AuthenticationManagerBuilder.UserDetailsService(myUserDetailService)
3.MyUserDetailService implement UserDetailService (loadByUserName return ((convert to dbUser)Spring Security User ))
4. /authenticate api return token from generateToken
5. authorize /authenticate as permit all
6. intercept all request using custom filter OncePerRequestFilter method doFilterInternal Pass this into authorize and apply 


 producer                         cluster - broker - topic - partition		cosumer




employees.sort(())



Employee(){

employeeId

Book {

bookdId}
}

OneToOne(Cascadetype = ALL)
@JoinColoun(name = "bookId")

Employee table 
coloum bookId)




OneToMany(targetEntity = Book.class, cascase all)
@JoinColumn(value = FK_employeeId, reference = "employeeId")

Book table 

coloum = FK_employeeId


Micro service
---------------------

Server --

1. dependency
2. @EnableEurekaServer
3. euereka.client.register-with-erureka = false
			fetch registry = false

Client --
1. depenency
2. @EnableEurkeaClient
3. appliation name
4. euereka.client.register-with-erureka = false
			fetch registry = false
5. service url
	Default-zone : eureka server url


API Gateway
--------------


1. Routing sppring cloud api gateway - routes - 
        id -
	uri - localhost/api/v1/user/123

	predicate /user/*	          

2. Monitoring actuator/gateway/
3. Security (spring security + jwt)
4. Circuit Breaker - 
5. Rate - limitor

Log Tracing
------------

Spring Cloud Sleuth is used to generate and attach the trace id, span id to the logs
Zepkin - show distributed log in one certralized dashboard

(app name, trace id(unique per request), span id(unique within method), zepkin flag)

spring cloud Config Server
--------------------
can centralize common perperties. 

1. app name
2. @EnableConfigServer
3. git url
4. dependency config server


consumer
---
1. import config server url
2. dependency config
3. Access using @Value
4. @RefreshScope @Componenent --> /actuator/refresh
5. management.endpoints.web.expose.include = refresh




Spring IOC Container
----------------------
1. Bean Factory - not support annotation - basic feafture - scope(Singleton, ProtoType)
2. ApplicationContext () - support annotation - extra feature (Singlton, prototype, request, session, context)


transaction prpagation
-----------------------
REQUIRED (Default) - use existing transaction if not there then create own txn.
SUPPORTED - use exiting if not there, commit without txn.
NOT SUPPOERED - does not use txn either exist or not.
NEVER - not use txn, if exist then throw exception.
MADATORY - alway use txn, if not exist then throw exception.  


transaction isolation
-----------------------
REPEATABLE READ (default) - take snapshot at begining of transaction, so qeury alway give same result so called repeatable read.
READ UNCOMMITED - Cause dirty read problem.
READ COMMITED - Cause non repeatable read.


T1 salary 30000
T2 update 50000
T1 salary 50000
T1        50000
T2 roll back
T1        30000  


T1 5
T1 5
T2 4
T1 5
T2 commit
T1 4


SAGA(distibuted transaction in Micro service)

-- by using kafka , it compesate all previous txn (Cho)



Marker
---------
Serialization


Employee emp;
ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream("subhash.txt"));
obj.writeObject(emp);



ObjectOutputStream obj1 = new ObjectOutputStream(new FileInputStream("subhash.txt"));
(Employee) obj1.readObject()



static final long serialVersionUid = 273728362738L; Why?



Internal Working of HashMap
--------------------------
1. Array of bucket
2. Each bucket consist of one or more node
3. Hashcode, k, v, Node


1. obj1  --> hashcode -> index value -> index 6 
obje2 6 -> Equals


get

obj1 -> index 6


()-> print()


@Resource vs @Autowired
---------------
@Resource ----> Dependency injection priority by name, by type, by qualifier (jsr-250 annotation)
@Autowire ----> Dependency injection priority by type, by qualifier, by name( Spring annotation)



springboot2 vs Springboot3
----------------------------
Minimum spring boot version which require JAVA17 - 2.5
Minimum spring version which require JAVA17 - 5.3
Security - actuator end point are also secured with Spring security if enabling spring boot security.


diamomd problem
--------------------

class Parent1 {

test(){
}

}
class Parent2 {

test(){
}

}

class DriverTest{

psvm(){

DriverTest driverTest = new DriverTest();
driverTest.test(); // Java will confuse which test method to call and will give error


}

}



Parent parent = new Child(); // valid
Child child = new Parent(); //Invalid (incompatible types)



Http Status Code
-----------------
-----------------

Success Code
------------
200 - Ok (sget data)
201 - Created (save data - POST)
202 - Accepted (ex - upload file for processing)


Client error code
--------------
400 bad request
401 unauthorize (authorization failure)
403 forbidden (authentication failure)
404 not found
405 method not allowed (http method missmatch)
429 Too many request (ex - Rate limitor)


Server side 
----------
500 Internal server error
503 servive unavailable


Batch Schedular
-------------
@EnableScheduling with @Configuration

@Scheduled(fixedRate = 1000) on method returning void



Second level caching (Hibernate)
======================
1. Dependency (Hibernate + EhCache)
2. Enable Cache (congif file or property file)
3. Region Factory class - EhCacheRegionFactory
4. @Cachable with @Entity



Impact by Replacing @Repository with @Component
------------------

1. @Repository transtate database related exception to Spring exception. So logs will be impacted.


Self Join
----------
employeeId, Name, ManagerId


get -> id, name , managerName

select * from employee as emp join employee as mgr on emp.managerId= mgr.employeeId;



Composite Key
---------------

@EmbededClass(EMployeeIdEmail.class)
Employee {
@Id
id,
@Id
email,
name

}

EMployeeIdEmail implement Serializable {

id,
email

override
Hashcode
equals
}

Employee {

@EmbededId
EMployeeIdEmail
name

}


@Embedable
EmployeeIdEmail implement Serializable {

id,
email

override
Hashcode
equals
}


Standard for API designing
---------------------------
1. Use noun for entity in URI, proper versioning
2. Entity or Actual deta inside app should isolated using Dto
3. Proper respose, status code
4. pagination
5. data filtering using request param
6. cache
7. Thread pool for async task
8. Logger
9. Validation on api inputs, Test
10. Follow SOLID principle and clean coding standard (sonar)
11. Rest Client load balancer
12. API gateway
13. Fault tolletance (Circuit breaker)
14. Security (https, spring security with jwt, auth2, cloud based user management, CORS)
15. Rate limitor, scalabe, 2nd level cache, Db indexing, kafka, db partition
16. config server (centralize/externalize config)
17. Automated test, build and deployment
18. Log monitor and set alert
19. Documentation



Swagger2
---------


SOLID principle
---------------------

Single Responsibility -- every java class should have single responsibility.


Open-Close For new requirement module should be open for extenstion but close for modification.


class Sqare {

double hight;

int area() {

   return hight*hight	
}

}

CompareAreaService {

double compareArea(Sqare a, Sqare b) {

return a.area() - b.area();

}

}


Problem - We have Compare area service, now imangine if area needs to compared for circle, triangle etc. For each we need to write compareArea method so
code will be meshed up.



Solution - Instead of passing Square instant we can pass Shape(Interface) instance and implement shape instace for each shape (circle, triangle).





interface Shape{

double area();

}


Liskov Substitution -- Base class should be subtitutable for it's base class. (should have interface for common method and seperate interafce for indivual functionality)


Interface segregation - should not force implementing client to implement method which is not relevant.


Dependency Inversion - We should use abstraction (Interface and abstract class) instead of concrete implementation. 



GroupingBY


int[]  arr = {1,1,1,2,2,3,2};

Arrays.stream(arr).boxed().collect(Collector.groupingBy(n->n))

Map<Integer, List<Integer>> =


chat[] charArr = {a,b,c,b,b,a,n,e};
charArr.chars().



mvn
---------
libA1      libB3
|	    |	
libX1.5	  libx2 	



java 8
=============
1. Default method in interface
2. static method in interface

3. function interface and labda exp

java8 FI
-----
a. Predicate -> boolean test(T) - filter
b. Function -> T1 apply(T2) - map
b. Supplier -> T get(); -- OptionaObject.orElseGet()
d. Consumer -> void accept(T) --- forEach


Stream -  sequence of elements
---------
reduce
map
flatMap
filter
mapToObj
boxed
sorted
findFirst
findAny
distinct
count

Method Referece

1. static method 
2. Custome class instance method
3. Arbiroty object method
4. Constructor


Optional
-------------
1.Exception if use get on Empty Optional.
2. Null check isPresent
2.1 Optional.OfNullable(var) ->  if var value is null, it will create Empty Optional 




Date time api
------------

LocalDate
LocalTime
LocalDateTime


DateTimeFormatter

Java 7 java 8 Date difference
-----------

1. Thread safety
2. Mutublity
3. 7 - month start with 0, day start with 1
4. TimeZone
5. 7 - only  Date class, 8 - LocalDate, LocalTime, LocalDateTime, ZonedDateTime


format date to ddMMyyyy (MM should be always capital)
------
DateTimeFOrmatter.ofPattern(ddMMyyyy).format(LocalDate.now);

convert "31.07.2016" ddMMyyyy to LocalDate
-------------

LocalDate.parse("31.07.2016", DateTimeFormatter.ofPattern(ddMMyyyy))




java7 (PermGen (fixed size)) -> Java 8 (MetaSpace (Not fixed size))



Class Loader
===================

1. Delegation - request delegate from parent class loader to child cloass loader
2. Class loaded by parent are visibale to child class and can not reload.  loader but not vice-versa





 













 




 













  


































 



 	


	


























